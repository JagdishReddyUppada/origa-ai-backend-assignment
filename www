
const config = require("config");
const http = require("http");

const app=require("./app");


const ServerPort = normalizePort(config.get("ServerPort"));
app.set("ServerPort",ServerPort);

const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(ServerPort);
server.timeout = 1000 * 60 * 3; //3 minutes
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(serverPort) {
    const ServerPort = parseInt(serverPort,10);
    if (isNaN(ServerPort)) {
        return serverPort;
    }
    else if(ServerPort>=0){
        return ServerPort;
    }
    return false;
}
/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log("Listening on " + bind);
  console.log("env", config.get("env").toString());
}
